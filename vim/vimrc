" Vim run command file

" +-------+
" |OPTIONS|
" +-------+
set nocompatible
set number relativenumber
set belloff=all
set encoding=utf-8
set autoindent
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set colorcolumn=90
set encoding=utf-8
set display=lastline
" Show partial command you type in the last line of the screen.
set showcmd
" Show the mode you are on the last line.
set showmode
set incsearch
set hls
set clipboard=unnamed
set scrolloff=3
set sidescroll=5
set listchars=space:·,nbsp:␣
set list
"   Search down in to sub-folders
"   Providse TAB-completion for all file-related tasks
set path+=**

"   Display all matching files when we TAB complete
set wildmenu
" There are certain files that we would never want to edit with Vim.
" Wildmenu will ignore files with these extensions.
set wildignore=*.docx,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx
" Enable mouse using
set mouse=a


" +------+
" |SYNTAX|
" +------+

" Enable syntax highlighting
syntax enable
" Enables filetype detection, loads ftplugin, and loads indent
" (Not necessary on nvim and may not be necessary on vim 8.2+)
" Enable type file detection. Vim will be able to try to detect the type of file is use.
filetype on
" Enable plugins and load plugin for the detected file type.
filetype plugin on
" Load an indent file for the detected file type.
filetype indent on
autocmd FileType python set omnifunc=python3complete#Complete
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
" to handle newer syntax of bash. e.g. $()
let g:is_posix=1


" +------+
" |COLORS|
" +------+

set background=dark
colorscheme PaperColor


" +-----------+
" |STATUS LINE|
" +-----------+

" statusline created just with vim syntax without external plugin
set laststatus=2 "   to show status line
set statusline=
set statusline+=%1*\ [%n]                "  Buffer number
set statusline+=\ %*
set statusline+=\ %f\ 
set statusline+=%2*\%m%r%h%w%*
set statusline+=%=
set statusline+=%3*%{gitbranch#name()}%*
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\ [%{&fileformat}\]
set statusline+=\ %l:%c
set statusline+=\ (%p%%)

highlight User1 ctermbg=yellow guibg=yellow ctermfg=black guifg=black
highlight User2 ctermbg=red guibg=red
highlight User3 ctermbg=lightgreen guibg=lightgreen ctermfg=red guifg=red


" +--------+
" |MAPPINGS|
" +--------+

inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap ` ``<left>

" enable Shift-Tab to move line by Tab back
" for command mode
nnoremap <S-Tab> <<
" for insert mode
inoremap <S-Tab> <C-d>


" +------------------------------+
" |HIGHLIGHT TRAILING WHITESPACES|
" +------------------------------+

highlight TrailingWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight TrailingWhitespace ctermbg=red guibg=red
" Show trailing whitespace regex \s\+$
call matchadd("TrailingWhitespace", '\s\+$')
autocmd BufWinEnter * call matchadd("TrailingWhitespace", '\s\+$')
autocmd BufWinLeave * call clearmatches()


" +---------------------------+
" |REMOVE TRAILING WHITESPACES|
" +---------------------------+

" :call TrimWhitespaces(), to invoke in vim
fun! TrimWhiteSpaces()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun


" +-------------+
" |FILE BROWSING|
" +-------------+

" with built-in netrw
" let g:netrw_banner=0      " disable annoying top banner
" let g:netrw_browse_split=4  " open in prior window
" let g:netrw_preview=1       " open in prior window
let g:netrw_altv=1          " open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_hide=0          " show all files (hidden also)
let g:netrw_menu=1          " netrw's menu enabled


" +--------+
" |SNIPPETS|
" +--------+

" HTML
" Read an empty HTML template and move cursor to title
nnoremap ,html :-1read $HOME/.vim/templates/.template.html<CR>6jwf>a

" HTML tags autocomplete
inoremap <lt>/ </<C-x><C-o><Esc>F<i

" The end </ invoke map above, so we combine abbrev with map together
func Eatchar(pat)
  let c = nr2char(getchar(0))
  return (c =~ a:pat) ? '' : c
endfunc
" autocomplete for a tag
autocmd FileType html iabbrev <a <a href=<C-v>"<C-v>"></<C-R>=Eatchar('\s')<CR>

